/**
*
* {{ properCase name }}
*
*/
/* eslint-disable import/first */
/* eslint-disable react/jsx-filename-extension */
/* eslint-disable react/prop-types */

import React from 'react';
{{#if isContainer}}
import { connect } from 'react-redux';
    {{#if wantActionsAndReducer}}
import * as actions from './actions';
    {{/if}}
{{/if}}

{{#if wantContentful}}
import * as contentful from 'contentful';
import { SPACE_ID, ACCESS_TOKEN } from './constants';
import Loading from '../../components/Loading';
{{/if}}

import {} from 'semantic-ui-react';

{{#if isContainer}}
export class {{ properCase name }} extends React.{{{ component }}} { // eslint-disable-line react/prefer-stateless-function
{{else}}
class {{ properCase name }} extends React.{{{ component }}} { // eslint-disable-line react/prefer-stateless-function
{{/if}}
  static defaultProps = {
    hasColorPrime: false,
  };
{{#if wantContentful}}
  constructor(props) {
    super(props);
    this.state = {
      isLoading: true,
    };
  }

  componentDidMount() {
    // const client = contentful.createClient({ space: SPACE_ID, accessToken: ACCESS_TOKEN });

    // client.getEntry(ENTRY_ID)
    //   .catch(console.error)
    //   .then((entry) => {
    //     const { title, subtitle, anchor } = entry.fields;
    //
    //     this.setState({ isLoading: false, title, subtitle, anchor });
    //   });

    // client.getAsset(IMAGE_ID)
    //   .catch(console.error)
    //   .then((asset) => {
    //     const { url } = asset.fields.file;
    //
    //     this.setState({
    //       isLoading: false,
    //       imageUrl: `https:${url}`,
    //     });
    //   });
  }
{{/if}}
  render() {
    const { } = this.props.contentfulData;

    return (
      <div>
        <style jsx>{``}</style>
        <p>{{ properCase name }}!!</p>
      </div>
    );
  }
}

{{#if wantActionsAndReducer}}
function mapStateToProps(state) {
  //const {} = state;
  return {};
}
{{/if}}

{{#if isContainer}}
{{#if wantActionsAndReducer}}
export default connect(mapStateToProps, actions)({{ properCase name }});
{{else}}
export default connect(null, actions)({{ properCase name }});
{{/if}}
{{else}}
export default {{ properCase name }};
{{/if}}